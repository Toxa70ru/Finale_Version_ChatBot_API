// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestionsAndAnswers.DataLayer.Repository;

#nullable disable

namespace QuestionsAndAnswers.DataLayer.Migrations
{
    [DbContext(typeof(ChatBotContext))]
    [Migration("20240209091209_Application")]
    partial class Application
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Appeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Appeal");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AppealId")
                        .HasColumnType("bigint");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ExecutorId")
                        .HasColumnType("bigint");

                    b.Property<int>("PCNumber")
                        .HasColumnType("integer");

                    b.Property<long>("SoftwareNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppealId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("SoftwareNameId");

                    b.HasIndex("StatusId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Executor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Executor");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SoftwareNameId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareNameId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Roles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.SoftwareName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("SoftName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("softwareNames");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.Application", b =>
                {
                    b.HasOne("QuestionsAndAnswers.DataLayer.Models.Appeal", "Appeal")
                        .WithMany()
                        .HasForeignKey("AppealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionsAndAnswers.DataLayer.Models.Executor", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionsAndAnswers.DataLayer.Models.SoftwareName", "SoftwareName")
                        .WithMany()
                        .HasForeignKey("SoftwareNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionsAndAnswers.DataLayer.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appeal");

                    b.Navigation("Executor");

                    b.Navigation("SoftwareName");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("QuestionsAndAnswers.DataLayer.Models.QuestionAnswer", b =>
                {
                    b.HasOne("QuestionsAndAnswers.DataLayer.Models.SoftwareName", "SoftwareName")
                        .WithMany()
                        .HasForeignKey("SoftwareNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoftwareName");
                });
#pragma warning restore 612, 618
        }
    }
}
